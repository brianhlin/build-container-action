name: 'Build Container Action'

description: 'Builds and caches the image'

inputs:
  tag_name:
    description: 'user specified tag name'
    required: false
    default: ''
  osg_series:
    description: 'OSG release series used to install packages'
    required: false
    default: '3.6'
  repo:
    description: 'Input string that gets passed along to the docker build args'
    required: false
    default: 'release'
  context:
    description: 'Path to container files, including Dockerfile'
    required: false
    default: '.'
  timestamp_tag:
    description: >-
      Timestamped tag name (e.g.,
      "opensciencegrid/osgvo-docker-pilot3.6-release-YYYYMMDD-hhmm")
      used to pass the Dockerfile as $TIMESTAMP_TAG
    required: false
    default: ''
  image_name:
    description: 'Name of the image to build, e.g. "opensciencegrid/software-base"'
    required: false
    default: ''
    
outputs:
      tags: 
        description: generated timestamp tag
        value: ${{ steps.create_timestamp_tag.outputs.tags }}
runs:
  using: "composite"
  steps:
  - uses: actions/checkout@v2

  - id: generate-image-name
    shell: bash
    run: |
      if [[ -n "${{ inputs.image_name }}" ]]; then
          IMAGE_NAME="${{ inputs.image_name }}"
      elif [[ ${{ inputs.context }} == "." ]] || \
         [[ ${{ inputs.context }} == "./" ]]; then
         # Try to guess the image name from our docker repo naming conventions
         # E.g., opensciencegrid/docker-frontier-squid
         IMAGE_NAME=${GITHUB_REPOSITORY/opensciencegrid\/docker-//}
      elif [[ -d ${{ inputs.context }} ]]; then
         # Assume that the containing dir is the image name
         IMAGE_NAME=$(basename ${{ inputs.context }})
      else
        echo "No image_name provided and ${{ inputs.context }} is not a directory"
        exit 1
      fi
      echo "::set-output name=image::${IMAGE_NAME,,}"
  - id: mkdatetag
    shell: bash
    run: echo "::set-output name=dtag::$(date +%Y%m%d-%H%M)"
  - id: create_timestamp_tag
    shell: bash
    run: echo "::set-output name=tags::${IMAGE}:${TAGNAME:-$DEFAULTTAG}-${DATE}"
    env:
      IMAGE: ${{ steps.generate-image-name.outputs.image }}
      TAGNAME: ${{ inputs.tag_name }}
      DEFAULTTAG : ${{ inputs.osg_series }}-${{ inputs.repo }}
      DATE: ${{ steps.mkdatetag.outputs.dtag }}
  - name: Set up Docker Buildx
    uses: docker/setup-buildx-action@v1

  - name: Build and push Docker images
    uses: docker/build-push-action@v2.8.0
    with:
      push: false
      context: ${{ inputs.context }}
      build-args: |
        BASE_YUM_REPO=${{ inputs.repo }}
        BASE_OSG_SERIES=${{ inputs.osg_series }}
        TIMESTAMP_TAG=${{ steps.create_timestamp_tag.outputs.tags }}
      tags: "latest"
      cache-to: type=local,dest=/tmp/.buildx-cache,mode=max

  - name: Cache Docker images
    uses: actions/cache@v2
    with:
      path: /tmp/.buildx-cache
      key: ${{ steps.generate-image-name.outputs.image }}_${{ inputs.osg_series}}_${{ inputs.repo }}_buildx_${{ github.sha }}_${{ github.run_id }}
